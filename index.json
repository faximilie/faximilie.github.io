[{"authors":["faximilie"],"categories":["automation"],"content":"The problem So I\u0026rsquo;m a bit of a weeb, and enjoy watching anime from time to time. However I often find myself forgetting my place during the weeks between episodes. This often leads me to drop an anime because I can\u0026rsquo;t find the right episode before losing motivation.\nI also have the issue of friends recommending me an anime, and I will forget it well before I get a chance to watch it.\nEnter Anilist/MyAnimeList, the anime tracking services similar to track.tv. This fixes both problems of tracking watched episodes, and new series to watch. However it introduces new issues, manually updating watched status.\nNow I\u0026rsquo;m a SecDevOps engineer, I won\u0026rsquo;t stand for manual intervention. So let\u0026rsquo;s automate everything.\nComponents As mentioned before Anilist is a key component of my setup, however there are a lot of other moving parts at work here to ensure little to no manual intervention is required.\nKodi Kodi is the HTPC interface, allowing me to utilize plex as a media library, while still providing a nice interface and other features independent of plex.\nBeing able to start steam big picture, or watch youtube is nice.\nKodi Plex This kodi plugin automatically syncs plex and kodi, letting kodi be the nice frontend while plex does all the hard work.\nIt ensures watch status, and the library is synced, and will get plex to stream the transcoded videos to kodi.\nPlex Plex provides the backbone of my media library. Transcoding, mobile syncing, and most importantly: the plex anilist sync script.\nPlex anilist sync This external script will query the Plex API and ensure that Anilist is kept up to date with the watch status. The repo can be found here: https://github.com/RickDB/PlexAniSync\nplex-mpv-shim This allows me to play videos from Plex locally on my favorite media player, while still syncing, transcoding and such. It\u0026rsquo;s a very important feature, that allows me to really save battery on the go.\nThis project can be found here: https://github.com/iwalton3/plex-mpv-shim/issues\nSonarr Somehow I need to get the anime, this is the job of sonarr which\u0026hellip; \u0026ldquo;procures\u0026rdquo; the files through totally legal channels. I won\u0026rsquo;t say anymore on sonarr sadly, despite how amazing it really is.\nFlexget Flexget is the glue that holds most things together, it provides the mechanism of getting my Anilist watchlist into sonarr to be \u0026ldquo;procured\u0026rdquo; automagically. However there seems to be a bug which caused me to write a fix in the most horrific way.\nFlex fix It seems if a show already exists in sonarr it will return a 500, and give the reason. A sane program would accept this 500 and move on, knowing it was not a severe error. However flexget does not do this, it errors out when 500 is returned for any reason which is rather frustrating. It also expects the show details to be returned when it 200s on that same request, so one can not simply have it replace 500 status codes with 200.\nTo fix this error, you must intercept all requests, and when a 500 error occurs for an existing show, you must then lookup that existing show through the sonarr api, and return those details to flexget with a 200 http code. This python script does exactly that, acting as a proxy, listening on a port below sonarr and connecting to sonarr itself.\nHere it is below, eventually this will be put in gist, but not at the moment.\nfrom http.server import HTTPServer, BaseHTTPRequestHandler from http.client import HTTPConnection from io import BytesIO import json class SimpleHTTPRequestHandler(BaseHTTPRequestHandler): def do_GET(self): self.send_response(200) api_key = self.headers['X-Api-Key'] self.end_headers() client.request('GET', self.path, headers={'X-Api-Key':api_key}) self.wfile.write(client.getresponse().read()) def do_POST(self): self.send_response(200) self.end_headers() content_length = int(self.headers['Content-Length']) body = self.rfile.read(content_length) # Get API Key api_key = self.headers['X-Api-Key'] body_json = json.loads(body.decode('utf8')) # Strip everything but ID new_body = {i:body_json[i] for i in body_json if i!='id'} # Make a connection to sonarr on behalf of the requester client.request('POST', self.path, headers={'X-Api-Key':api_key}, body=json.dumps(new_body)) resp = client.getresponse() # If 400 we're gonna do the fix if resp.status == 400: resp.read() # Get the details of the series from sonarr and send it back to the sender pretending they added it client.request('GET', '/api/series/' + str(body_json['id']), headers={'X-Api-Key':api_key}) self.wfile.write(client.getresponse().read()) else: # If it's another code we simply return what we got self.wfile.write(resp.read()) client = HTTPConnection('127.0.0.1:8989') httpd = HTTPServer(('127.0.0.1', 8988), SimpleHTTPRequestHandler) httpd.serve_forever()  ","date":1592714639,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592714639,"objectID":"80325cb2bdbf6c3d422f02a26a1d762f","permalink":"/post/mutli-media-madness/","publishdate":"2020-06-21T14:43:59+10:00","relpermalink":"/post/mutli-media-madness/","section":"post","summary":"The problem So I\u0026rsquo;m a bit of a weeb, and enjoy watching anime from time to time. However I often find myself forgetting my place during the weeks between episodes. This often leads me to drop an anime because I can\u0026rsquo;t find the right episode before losing motivation.","tags":["automation","multimedia","api"],"title":"Mutli-media Madness","type":"post"},{"authors":[null],"categories":["security"],"content":"This website looks very bare, not many projects and posts. There\u0026rsquo;s a big reason why it\u0026rsquo;s so empty, Opsec.\nI\u0026rsquo;ve spent a lot of my life protecting my identities from a real life counterpart. Thus protecting me from fallout of my poor decisions in my youth. Now that I\u0026rsquo;m in my 20s, and looking for work, I do need an identity closely tied to my real life identity. So this identity was created to facilitate that, so that I can still provide personal details publicly without cross contaminating with other identities.\nThus this identity, and by extension this website does not have much content. All my achievements are strewn across various identities.\nWhile this Identity isn\u0026rsquo;t that new, it\u0026rsquo;s not been utilized much. I\u0026rsquo;m going to start using it more for projects that don\u0026rsquo;t require separation of identities.\nSo hopefully this website will be more appealing to employers in the near future.\n","date":1558483200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558483200,"objectID":"ea043fe68a858801d1ba55e137fa913b","permalink":"/post/simple-opsec/","publishdate":"2019-05-22T00:00:00Z","relpermalink":"/post/simple-opsec/","section":"post","summary":"A explaination for the lack of content on this website.","tags":["website","security","meta"],"title":"Simple Opsec","type":"post"},{"authors":[null],"categories":["meta"],"content":"Hello, this is a very simple post to say that this website is now working. Built with hugo and the Academic hugo theme.\nIt\u0026rsquo;s very simple, hosted on github pages.\n","date":1558396800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558396800,"objectID":"3f289ad9deff50f67a8232b628d934fb","permalink":"/post/hello-world/","publishdate":"2019-05-21T00:00:00Z","relpermalink":"/post/hello-world/","section":"post","summary":"Hello world, hello hugo.","tags":["hugo","meta","website","github"],"title":"Hello Hugo","type":"post"},{"authors":[null],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"2c61efbadca7fd2d1095ed03a989ff23","permalink":"/publication/becoming-a-command-line-ninja/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/becoming-a-command-line-ninja/","section":"publication","summary":"A talk detailing the steps to become proficient with the Linux CLI. Following in the Unix Way.","tags":["linux","cli","workflow"],"title":"Becoming a Command Line Ninja","type":"publication"},{"authors":[null],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"5d5405623273974ff109f26537ca4072","permalink":"/publication/cryptography-101/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/cryptography-101/","section":"publication","summary":"A talk detailing the basics and foundation of modern cryptography.","tags":["cryptography"],"title":"Cryptography 101","type":"publication"},{"authors":[null],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"e7c259ac9632045ec90215cdbcef5b8e","permalink":"/publication/malware-a-crash-course/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/malware-a-crash-course/","section":"publication","summary":"A talk giving a crash course in malware, where it comes from, how it's made, what is it?","tags":["malware"],"title":"Malware: a Crash Course","type":"publication"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"1c2a5dd8f04c087f5316de50fdf179f0","permalink":"/project/website/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/website/","section":"project","summary":"This website, it s a project found in github.","tags":["website","hugo"],"title":"Website","type":"project"},{"authors":[null],"categories":["cli"],"content":"Becoming a Command Line Ninja  About me  Patrick Childs Associate Global Tech ops Engineer at tigerspike Terminal Junky Really lazy Like REALLY lazy Hates typing Hate mice even more   You may know me Terminal junky  Made talk with CLI   Lazy  Really lazy bound nvim to v   I have an adversion to typing  GUIs require you to type more can\u0026rsquo;t scipt GUIs      Why use the Terminal  Fast, and accurate Mice suck Allows scripting, which reduces repetition and thus mistakes String commands together to fit your workflow Unix Philosophy: Do one thing and do it well   Mice suck  They\u0026rsquo;re slow and inaccurate   Unix philosophy  Most CLI applications follow Unix philosohpy      Example ![Finding the largest folder modified within 30 days](./CommandLineFu/Images/Largest folders modified in the last 30 days.png)\n How to Git Gud with the CLI  Learn CoreUtils  cat Grep sed find   Learn to modify data  head tail awk Everything is a list of strings   Learn to use the Shell ![img](./CommandLineFu/Images/My Shell.png \u0026ldquo;My Shell\u0026rdquo;)\n BASH and ZSH are shells It\u0026rsquo;s what you interact with   Shell shortcuts   Directory stack\n pushd popd    History searching\n  Parameter history\n !$ !2 sudo !!     Stop repeating yourself  Learn to script If you do it once, that\u0026rsquo;s already too many times Do it now so you can be lazy later   Find hackable programs  Means you can modify them to how *you want   Programs like  Ripgrep FZF Vim Ranger Tmux FASD Taskwarrior   Programs to use  Ripgrep  Source code searcher Like grep, ack and the silver searcher Super fast Ignores .git Ignores based on .gitignore and .ignore files   FZF  Fuzzy searcher Takes any line delimited input on STDIN Prints selected to STDOUT Without STDIN defaults to files Great for scripts   FZF demo  Fuzzy files Fuzzy git Fuzzy history    Ranger  CLI File explorer Powerful and scriptable Knows when to defer tasks to other programs Bulk renaming through text editing Searching through FZF   Ranger demo  Vim   Vim is old\n  Vim is different\n  Vim is amazing\n  Vim is old\n Has it\u0026rsquo;s roots in an editor from the 1970s    Vim is different\n It\u0026rsquo;s a modal editor     Reasons to use vim  It\u0026rsquo;s fast to startup It\u0026rsquo;s fast to use It uses almost no memory You\u0026rsquo;re already in the terminal, why bother with GUI Reduces key presses   Modal Editor  Vim is a model editor Based around the idea of making agnostic, atomic and repeatable changes   What the hell does that mean?  Surround this word with quotes Delete 3 paragraphs Swap every third word that matches what is in my clipboard   Vim plugins   Vim has at least 16000 plugins\n More than Sublime, or Atom    Has own language called VimScript\n  Plugins that integrate with FZF and Ripgrep\n  Snippets\n   Snippets  UltiSnippets is probably the best around Python and Vimscript evaluation of default values  Which means you can have it fill in the blanks programatically\n Vim demo Look through bkash find bkash.yaml filter lines to find rds template goto file fzf files make change show off magit   FASD  Frecencey fuzzy matching (frequency + recency) F for files A for All S for interactive search D for directories Z for autojump to drectory   Fasd demo  TMux  Terminal multiplexer Window manager for your terminal Gives you windows, tabs, and sessions Is scriptable, so you can make it create a workspace for a specific project   Taskwarrior   Hackable, extensible task management system\n  Scriptable, and plugin support\n Bugwarrior - Email and Jira integration    Time tracking\n  Tags (many to many)\n  Projects (many to one)\n   Takeaways  Stop repeating yourself (make scripts) Be lazy and hate typing Find ways you can integrate everything Don\u0026rsquo;t be afraid to try new things and put some elbow grease into a task  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b442e8a5e4e1db17c399b382d6183ce8","permalink":"/slides/becoming-a-command-line-ninja/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/becoming-a-command-line-ninja/","section":"slides","summary":"Using the Linux CLI to do things quickly","tags":["linux","cli","workflow","slide"],"title":"Becoming a Command Line Ninja","type":"slides"},{"authors":[null],"categories":["cryptography"],"content":"Cryptography 101  What is cryptography  The art of writing or solving codes. Comes from the greek kryptos-graphein meaning hidden writing The only mathematically sound security measure   Brief history  Cesar Cipher  Used by Cesar for personal communication in the 1st Century BCE Simple substitution cipher Can be easily cracked based on character frequency   Enigma  Used by Nazi Germany during WWII Complex substitution cipher Fatal flaw that no letter could be itself Cracked by Alan Turing and his Team from the UK   The big change  Up until this point all ciphers where symmetric Means the same key is used to encrypt and decrypt How to share the key securely?   RSA  The first asymmetric cipher Developed in 1977 Has two keys instead of one   Asymmetric Cryptography How does this work  Relies on one way math functions Some mathematical functions are east to do one way, but hard to reverse These are:  Multiplying primes Modulus Elliptic Curves    Primes   Multiplying two primes\n\\begin{equation} 7 \\times 13 = 91 \\text{(Easy)} \\end{equation}\n  Factoring a product of two primes\n\\begin{equation} a \\times b = 68 \\text{(Hard)} \\end{equation}\n  Modulus   Modulus is the remainder\n  Like a clock\n\\begin{equation} 13 \\mod 12 = 1 \\end{equation}\n\\begin{equation} 16 \\mod 12 = 4 \\end{equation}\n  Doing reverse is hard\n\\begin{equation} a \\mod 10 = 5 \\end{equation}\n  what is a?\n  5, 15, 25, 55, 105, or 900000005?\n  Elliptic Curves  Way out of the scope of this talk Basically using curve functions to calculate data Think parabolas and such  RSA  Relies on Primes and Modulus Private and public keys Keys are just prime numbers You can encrypt with public or private Whatever key you do an operation with, you will need the opposite key to reverse it If you encrypt with private, you can only decrypt with public  Example   Choose two distinct prime numbers\n\\begin{equation} p=61 \\\nq=51 \\end{equation}\n  Compute n = pq\n\\begin{equation} n = 61 \\times 53 = 3233 \\end{equation}\n  Compute the Carmichael\u0026rsquo;s totient function of the product as λ(n) = lcm(p − 1, q − 1)\n\\begin{equation} \\lambda(n) = \\text{lcm}(60, 52) = 780 \\end{equation}\n- Sounds complex - Gives us an exponent so that any coprime of n when given that a\u0026lt;sup\u0026gt;m\u0026lt;/sup\u0026gt; mod n = 1 where a is the coprime - What's a coprime? Two integers that the only common divisor is 1 - We can calculate totient using LCM (least common multiple)     Choose any number 1 \u0026lt; e \u0026lt; 780 that is coprime to 780. Choosing a prime number for e leaves us only to check that e is not a divisor of 780.\n\\begin{equation} e = 17 \\end{equation}\n  Compute d, the modular multiplicative inverse of e (mod λ(n))\n\\begin{equation} d \\times e \\mod \\lambda(n) = 1 \\\n413 \\times 17 \\mod 780 = 1 \\end{equation}\n   Modular multiplicative inverse means d*e is congruent to 1 (mod λ(n))     public key is (n = 3233, e = 17), with message m, encryption function is\n\\begin{equation} c(m) = m^{17} \\mod 3233 \\\nc = 65^{17} \\mod 3233 = 2790 \\end{equation}\n  private key is (n = 3233, d = 413), with ciphertext c, decryption function is\n\\begin{equation} m(c) = c^{413} \\mod 3233 \\\nm = 2790^{413} \\mod 3233 = 65 \\end{equation}\n  Where is RSA used  HTTPS SSH any TLS or SSL implementation Email PGP   Key Exchanges  RSA is all well and good But how do you securely exchange keys This is where the Diffie–Hellman key exchange comes into play  Diffie-Hellman  An algorithm for securely transferring keys publicly Simple in design, yet surprisingly robust  Simple overview Generating Initial Secrets Derriving Shared Secrets  Hashes  Hashes are unpredictable, random, digests of data. They have a few key features:  Random, and completely unpredictable One way, they cannot be easily reversed Transform large data into small data of a known size Unique, not likely that two pieces of data with the same hash    Random  Hashes should be sufficiently random They should be virtually impossible to predict  One way  Hashes should be impossible to reverse The only way to find the original data is to brute force  Transform  Hashes should be able to represent larger data They should be a known length  Unique  Hashes are flawed Converting large data to small data will result in clashes These are called collisions A good hash should reduce the likely-hood of collisions  Uses of hashes  What\u0026rsquo;s the use-case?  Data/File verification Storing passwords securely Digital signing    Caveats  Not all hash algorithms are created equal Use different ones for your use case Storing passwords? Use CPU insensitive algorithms (BCrypt) There\u0026rsquo;s more, but that\u0026rsquo;s for another talk   The hidden complexity  The maths behind cryptography is fairly straightforward The maths is also very secure The implementation may not be  Unsafe implementation  It\u0026rsquo;s easy to implement RSA or AES yourself It\u0026rsquo;s easy to miss hidden complexities It\u0026rsquo;s hard to generate sufficiently random numbers It\u0026rsquo;s hard to avoid leaking information about the key   Takeaways  Do not implement your own crypto Do not implement an existing crypto Use an existing implementation that\u0026rsquo;s been proven to work Use Libsodium Even if you do everything right it\u0026rsquo;s pointless since the AABill passed  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c4767afb070372b56daa51ed78abb5de","permalink":"/slides/cryptography-101/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/cryptography-101/","section":"slides","summary":"Basic Crypto","tags":["cryptography","slide"],"title":"Cryptography 101","type":"slides"},{"authors":[null],"categories":["malware"],"content":"Malware: a Crash Course  What is malware  Any malicious software Worms, viruses, trojans, etc   Who makes malware  Russians  Russian law where they only charge people who commit cybercrime against Russians Effective method of avoiding infection is to set your default language to Russian   teenagers from US, CA, UK, and AU   Overview of terms  Terms are not mutually exclusive malware can leverage different features and be labeled different ways  Trojans  Malware hidden in legitimate software Usually done by binding or backdooring legitimate software Usually found in torrents  Worms  Malware that automatically spreads without user interaction Usually exploits network vulnerabilities Not common anymore, although Wannacry was an exception  Spyware  Spyware is malware that is often legitimate in some respect but will steal and siphon data away  Viruses  Self replicating malware The term is not often used outside of pop culture as it\u0026rsquo;s ill defined   Major types of malware Rootkits  Complicated methods of hiding aspects of malware Usually hiding files, registry keys, and network connections from the system Usually Ring3 (userland) based Sometimes Ring0 (kernal) based Very occasionally a bootkit (bios rootkit)  Rings  Rings are the level of access there\u0026rsquo;s usually two major ones  Ring 3 - The userland where most applications will run Ring 0 - The kernel where most drivers and the operating system will run   Having a lower ring means you can hook System calls first  System calls  System calls are what applications use to communicate with the OS and hardware there are system calls for reading files, making network connections, etc All abstracted to be non-hardware specific  Hooking  Rootkits work by hooking system calls and intercepting the data between the OS and the application There are a LOT of ways to do this They often go down the chain, where the first hook will be called first Thus getting the first hook is crucial in correctly intercepting data Anti-viruses will also hook system calls to check for rootkits and suspicious behavior  Loaders  Malware specifically designed to provide strong persistence on a compromised system It\u0026rsquo;s job is to make sure no Anti-Virus or User can remove it It often utilizes rootkits to achieve it\u0026rsquo;s goal It only exists to provide baseline persistence and load more specialized malware onto a system a Prominent example is Smoke Loader  RATs  Remote Administration Trojans Truely the most prolific malware type Used by teenagers to dip their toe into cybercrime They provide intimate access to a compromised computer as opposed to more sophisticated malware such as botnets Allowing remote desktop, access to the webcam, keylogger, chats, and even functions to troll the user (ejecting CD drive) Relatively cheap $20 a license with the ability to generate new payloads at will Most prominent RATs are:  Blackshades DarkComet jRAT    Botnets  Botnet is an umbrella term for malware that is designed to collect a large amount of compromised hosts and create a network of bots They\u0026rsquo;re often another type of malware in conjunction with this They\u0026rsquo;re designed for controlling thousands if not millions of compromised hosts Very expensive, $100s of dollars for a payload to be generated by the author This is in stark contrast to RATs Prominent examples are:  Betabot Andromeda    Banking Trojans  Banking trojans are unique and powerful They\u0026rsquo;re specifically designed to defeat all verifications banks put in their web pages They can defeat encryption by hooking browser networking functions intercept HTTP(S) POST requests skimming data (logins, credit card numbers, etc) intercept incoming HTTP(S) traffic and inject malicious javascript They can then automatically siphon money from the account and hide the transactions All generally cloned from zeus\u0026rsquo;s leaked source code Absurdly expensive, usually upwards of $1000 for a single payload generated by sellers Prominent examples:  Zeus SpyEye Citadel Kronus    POS malware  Attacks Point of sales machines Constantly scans memory for credit card numbers Where most credit cards are stolen from  Ransomware  Also known as Cryptolockers Restrict access to the system and demand a payment Usually this is done by encrypting files Very common these days   Design choices OS Choice  Malware is often only made for windows as it represents the largest market share This is not to say there isn\u0026rsquo;t malware for Linux/MacOS/BSD, they are just much less common  Language choice  Malware is often written in C, C++, Delphi, and VB6 This is to avoid depending on libraries having being installed on the system (.NET or Java)  Compactness and modularity  Malware is often designed to be compact and small to allow it to be downloaded remotely over slow connections This leads to modularization, lots of complicated malware will segment it\u0026rsquo;s capabilities into modules that will be loaded when needed   Side note: Crypters  Crypters encrypt payloads to avoid anti-virus detection Relatively cheap When no Anti-virus detects it it\u0026rsquo;s called FUD Protection only lasts a few weeks, so older files are safer.   Infection Vectors  There are a lot of ways people look to infect victims with a malicious payload Each type of malware usually has a specific method of infection designed to target specific demographics  Pirated software  Pirated software is commonly infected, usually a malicious payload is binded to existing torrents, crypted to avoid detection, and uploaded. Sites like the pirate bay are pretty good at taking down infected uploads KAT is not so great This is mainly used by owners of RAT networks, as it\u0026rsquo;s easy and low cost.  Drive bys  A common method botnet owners use to gain a large number of infected hosts Has 3 major components  Exploit kit Compromised sites Payload   Often used to target 3rd world countries  Exploit Kit  An exploit kit is a piece of software designed to select an exploit that will be effective against an unpatched piece of software (IE 8, old flash, etc) They are usually rented on a daily basis for $300+/day RIG Exploit Kit is the most common used  Legitimate Compromised site  You need to get traffic to an exploit kit This is usually done through exploiting legit sites and placing iframes to the exploit kit Sometimes done through malicious advertisements as well  The payload  Often the space to run code after an exploit is small Often just enough to download and execute an additional stage  Malicious mail attachments  Saw a dip in popularity during the early 2000s On the rise with cryptolockers Usually abuse Word macros to execute payloads Often targeting business specifically  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"117e4d325e0c9520e95cf4b9153f7694","permalink":"/slides/malware-a-crash-course/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/malware-a-crash-course/","section":"slides","summary":"A runthrough of malware","tags":["malware","slide"],"title":"Malware a Crash Course","type":"slides"}]