<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts | Faximilie</title><link>/post/</link><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><description>Posts</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 30 Oct 2020 15:45:00 +1100</lastBuildDate><image><url>img/map[gravatar:%!s(bool=false) shape:circle]</url><title>Posts</title><link>/post/</link></image><item><title>Outlook Org-mode integration on MacOS</title><link>/post/outlook-org-macos/</link><pubDate>Fri, 30 Oct 2020 15:45:00 +1100</pubDate><guid>/post/outlook-org-macos/</guid><description>&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>So a lot of my notes and tasks will require me to reference outlook items,
either emails or meetings.&lt;/p>
&lt;p>There aren&amp;rsquo;t any real solutions for Achieving this on MacOS at the moment, and
the Windows solutions are not too great.&lt;/p>
&lt;p>So I decided to create this unholy abomination. I&amp;rsquo;m sorry.&lt;/p>
&lt;h2 id="components">Components&lt;/h2>
&lt;p>So there&amp;rsquo;s a few moving parts to this, but overall it&amp;rsquo;s mainly leverging
&lt;strong>AppleScript&lt;/strong>, &lt;strong>Karabiner&lt;/strong> and &lt;strong>Emacs&lt;/strong> to provide this functionality.&lt;/p>
&lt;h3 id="applescript">AppleScript&lt;/h3>
&lt;p>Let&amp;rsquo;s start with the MacOS Native automation tools, this is how we&amp;rsquo;ll get the ID
of the Outlook item, which we will need later when searching for it.&lt;/p>
&lt;p>There are two AppleScript files, one for inserting a link into the current
buffer, and another for using a capture template. Both are almost identical, but
one evals some Elisp to ensure we insert at the right point and file.&lt;/p>
&lt;h4 id="insertion">Insertion&lt;/h4>
&lt;pre>&lt;code class="language-applescript">tell application &amp;quot;Microsoft Outlook&amp;quot;
set theMessages to selected objects
repeat with theMessage in theMessages
set toOpen to id of theMessage
end repeat
end tell
tell application &amp;quot;Emacs&amp;quot; to activate
do shell script &amp;quot;/usr/local/bin/emacsclient --eval '(with-current-buffer (window-buffer) (org-insert-link nil \&amp;quot;outlook:&amp;quot; &amp;amp; toOpen &amp;amp; &amp;quot;\&amp;quot; (read-string \&amp;quot;Link Name:\&amp;quot;)))'&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="capture">Capture&lt;/h4>
&lt;pre>&lt;code class="language-applescript">tell application &amp;quot;Microsoft Outlook&amp;quot;
set theMessages to selected objects
repeat with theMessage in theMessages
set toOpen to id of theMessage
end repeat
end tell
tell application &amp;quot;Emacs&amp;quot; to activate
do shell script &amp;quot;/usr/local/bin/emacsclient \&amp;quot;org-protocol://capture?template=o&amp;amp;url=&amp;quot; &amp;amp; toOpen &amp;amp; &amp;quot;\&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>
&lt;h3 id="karabiner">Karabiner&lt;/h3>
&lt;p>Karabiner provides a very nice way of running a shell script from a keybind, and
even supports filtering to the correct window. Thus this keybind will only
trigger when Outlook is focused.&lt;/p>
&lt;p>&lt;kbd>Command+L&lt;/kbd> will insert and &lt;kbd>Command+Shift+L&lt;/kbd> will capture&lt;/p>
&lt;pre>&lt;code class="language-json">{
&amp;quot;title&amp;quot;: &amp;quot;Outlook-Emacs&amp;quot;,
&amp;quot;rules&amp;quot;: [
{
&amp;quot;description&amp;quot;: &amp;quot;Meta-L to copy outlook item to orgmode&amp;quot;,
&amp;quot;manipulators&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;,
&amp;quot;from&amp;quot;: {
&amp;quot;key_code&amp;quot;: &amp;quot;l&amp;quot;,
&amp;quot;modifiers&amp;quot;: {
&amp;quot;mandatory&amp;quot;: [&amp;quot;left_command&amp;quot;],
&amp;quot;optional&amp;quot;: [&amp;quot;caps_lock&amp;quot;]
}
},
&amp;quot;to&amp;quot;: [
{
&amp;quot;shell_command&amp;quot;: &amp;quot;osascript ~/Documents/Store_Selected_OutlookItem_As_Orgmode_Link.scpt&amp;quot;
}
],
&amp;quot;conditions&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;frontmost_application_if&amp;quot;,
&amp;quot;bundle_identifiers&amp;quot;: [&amp;quot;^com\\.microsoft\\.Outlook$&amp;quot;]
}
]
}
]
},
{
&amp;quot;description&amp;quot;: &amp;quot;Meta-L to copy outlook item to orgmode&amp;quot;,
&amp;quot;manipulators&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;,
&amp;quot;from&amp;quot;: {
&amp;quot;key_code&amp;quot;: &amp;quot;l&amp;quot;,
&amp;quot;modifiers&amp;quot;: {
&amp;quot;mandatory&amp;quot;: [&amp;quot;left_command&amp;quot;, &amp;quot;left_shift&amp;quot;],
&amp;quot;optional&amp;quot;: [&amp;quot;caps_lock&amp;quot;]
}
},
&amp;quot;to&amp;quot;: [
{
&amp;quot;shell_command&amp;quot;: &amp;quot;osascript ~/Documents/Capture_Selected_OutlookItem_As_Orgmode_Link.scpt&amp;quot;
}
],
&amp;quot;conditions&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;frontmost_application_if&amp;quot;,
&amp;quot;bundle_identifiers&amp;quot;: [&amp;quot;^com\\.microsoft\\.Outlook$&amp;quot;]
}
]
}
]
}
]
}
&lt;/code>&lt;/pre>
&lt;h3 id="emacs">Emacs&lt;/h3>
&lt;p>There are two parts of this for Emacs, the Capture template, and the custom hyperlink&lt;/p>
&lt;h4 id="custom-link">Custom Link&lt;/h4>
&lt;p>I just dump this into my startup config, but you could make an &lt;code>ol-outlook.el&lt;/code>
if you wanted to make it less platform specific.&lt;/p>
&lt;p>This relies on MDFind which is the macos spotlight CLI, it will find it, then
open it in outlook.&lt;/p>
&lt;pre>&lt;code class="language-emacs-lisp">(require 'ol)
(org-add-link-type &amp;quot;outlook&amp;quot; 'org-outlook-open)
(defun org-outlook-open (id _)
&amp;quot;Open the outlook item matching that ID&amp;quot;
(shell-command (format &amp;quot;mdfind \&amp;quot;com_microsoft_outlook_recordID == '%s'\&amp;quot; -0 | xargs -0 open &amp;quot; id)))
&lt;/code>&lt;/pre>
&lt;h4 id="capture-template">Capture template&lt;/h4>
&lt;p>Ideally this should be customized more for your setup, but this is what I use.&lt;/p>
&lt;pre>&lt;code class="language-emacs-lisp">(add-to-list 'org-capture-templates '(&amp;quot;o&amp;quot; &amp;quot;Outlook item to capture&amp;quot; entry
(file+headline &amp;quot;~/Documents/Notes/inbox.org&amp;quot; &amp;quot;Tasks&amp;quot;)
&amp;quot;* TODO [[outlook:%:link][%^{Item name|Email}]]&amp;quot; :clock-in t :clock-resume t))
&lt;/code>&lt;/pre>
&lt;link rel="stylesheet"
href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/default.min.css">
&lt;script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/highlight.min.js">&lt;/script>
&lt;script charset="UTF-8" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/languages/applescript.min.js">&lt;/script>
&lt;script charset="UTF-8" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/languages/lisp.min.js">&lt;/script></description></item><item><title>Multi-media Madness</title><link>/post/multi-media-madness/</link><pubDate>Sun, 21 Jun 2020 14:43:59 +1000</pubDate><guid>/post/multi-media-madness/</guid><description>&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>So I&amp;rsquo;m a bit of a weeb, and enjoy watching anime from time to time. However I often find myself forgetting my place during the weeks between episodes. This often leads me to drop an anime because I can&amp;rsquo;t find the right episode before losing motivation.&lt;/p>
&lt;p>I also have the issue of friends recommending me an anime, and I will forget it well before I get a chance to watch it.&lt;/p>
&lt;p>Enter Anilist/MyAnimeList, the anime tracking services similar to track.tv. This fixes both problems of tracking watched episodes, and new series to watch. However it introduces new issues, manually updating watched status.&lt;/p>
&lt;p>Now I&amp;rsquo;m a SecDevOps engineer, I won&amp;rsquo;t stand for manual intervention. So let&amp;rsquo;s automate &lt;strong>everything&lt;/strong>.&lt;/p>
&lt;h2 id="components">Components&lt;/h2>
&lt;p>As mentioned before Anilist is a key component of my setup, however there are a lot of other moving parts at work here to ensure little to no manual intervention is required.&lt;/p>
&lt;h3 id="kodi">Kodi&lt;/h3>
&lt;p>Kodi is the HTPC interface, allowing me to utilize plex as a media library, while still providing a nice interface and other features independent of plex.&lt;/p>
&lt;p>Being able to start steam big picture, or watch youtube is nice.&lt;/p>
&lt;h4 id="kodi-plex">Kodi Plex&lt;/h4>
&lt;p>This kodi plugin automatically syncs plex and kodi, letting kodi be the nice frontend while plex does all the hard work.&lt;/p>
&lt;p>It ensures watch status, and the library is synced, and will get plex to stream the transcoded videos to kodi.&lt;/p>
&lt;h3 id="plex">Plex&lt;/h3>
&lt;p>Plex provides the backbone of my media library. Transcoding, mobile syncing, and most importantly: the plex anilist sync script.&lt;/p>
&lt;h4 id="plex-anilist-sync">Plex anilist sync&lt;/h4>
&lt;p>This external script will query the Plex API and ensure that Anilist is kept up to date with the watch status.&lt;/p>
&lt;p>The repo can be found here: &lt;a href="https://github.com/RickDB/PlexAniSync">https://github.com/RickDB/PlexAniSync&lt;/a>&lt;/p>
&lt;h4 id="plex-mpv-shim">plex-mpv-shim&lt;/h4>
&lt;p>This allows me to play videos from Plex locally on my favorite media player, while still syncing, transcoding and such.
It&amp;rsquo;s a very important feature, that allows me to really save battery on the go.&lt;/p>
&lt;p>This project can be found here: &lt;a href="https://github.com/iwalton3/plex-mpv-shim/issues">https://github.com/iwalton3/plex-mpv-shim/issues&lt;/a>&lt;/p>
&lt;h3 id="sonarr">Sonarr&lt;/h3>
&lt;p>Somehow I need to get the anime, this is the job of sonarr which&amp;hellip; &amp;ldquo;procures&amp;rdquo; the files through totally legal channels.
I won&amp;rsquo;t say anymore on sonarr sadly, despite how amazing it really is.&lt;/p>
&lt;h3 id="flexget">Flexget&lt;/h3>
&lt;p>Flexget is the glue that holds most things together, it provides the mechanism of getting my Anilist watchlist into sonarr to be &amp;ldquo;procured&amp;rdquo; automagically. However there seems to be a bug which caused me to write a fix in the most horrific way.&lt;/p>
&lt;h4 id="flex-fix">Flex fix&lt;/h4>
&lt;p>It seems if a show already exists in sonarr it will return a 500, and give the reason. A sane program would accept this 500 and move on, knowing it was not a severe error.&lt;/p>
&lt;p>However flexget does not do this, it errors out when 500 is returned for &lt;em>any reason&lt;/em> which is rather frustrating. It also expects the show details to be returned when it 200s on that same request, so one can not simply have it replace 500 status codes with 200.&lt;/p>
&lt;p>To fix this error, you must intercept all requests, and when a 500 error occurs for an existing show, you must then lookup that existing show through the sonarr api, and return those details to flexget with a 200 http code.&lt;/p>
&lt;p>This python script does exactly that, acting as a proxy, listening on a port below sonarr and connecting to sonarr itself.&lt;/p>
&lt;p>Here it is below, eventually this will be put in gist, but not at the moment.&lt;/p>
&lt;pre>&lt;code class="language-python">from http.server import HTTPServer, BaseHTTPRequestHandler
from http.client import HTTPConnection
from io import BytesIO
import json
class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
def do_GET(self):
self.send_response(200)
api_key = self.headers['X-Api-Key']
self.end_headers()
client.request('GET', self.path, headers={'X-Api-Key':api_key})
self.wfile.write(client.getresponse().read())
def do_POST(self):
self.send_response(200)
self.end_headers()
content_length = int(self.headers['Content-Length'])
body = self.rfile.read(content_length)
# Get API Key
api_key = self.headers['X-Api-Key']
body_json = json.loads(body.decode('utf8'))
# Strip everything but ID
new_body = {i:body_json[i] for i in body_json if i!='id'}
# Make a connection to sonarr on behalf of the requester
client.request('POST', self.path, headers={'X-Api-Key':api_key}, body=json.dumps(new_body))
resp = client.getresponse()
# If 400 we're gonna do the fix
if resp.status == 400:
resp.read()
# Get the details of the series from sonarr and send it back to the sender pretending they added it
client.request('GET', '/api/series/' + str(body_json['id']), headers={'X-Api-Key':api_key})
self.wfile.write(client.getresponse().read())
else:
# If it's another code we simply return what we got
self.wfile.write(resp.read())
client = HTTPConnection('127.0.0.1:8989')
httpd = HTTPServer(('127.0.0.1', 8988), SimpleHTTPRequestHandler)
httpd.serve_forever()
&lt;/code>&lt;/pre></description></item><item><title>Simple Opsec</title><link>/post/simple-opsec/</link><pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate><guid>/post/simple-opsec/</guid><description>&lt;p>This website looks very bare, not many projects and posts. There&amp;rsquo;s a big reason why it&amp;rsquo;s so empty, Opsec.&lt;/p>
&lt;p>I&amp;rsquo;ve spent a lot of my life protecting my identities from a real life counterpart. Thus protecting me from fallout of my poor decisions in my youth. Now that I&amp;rsquo;m in my 20s, and looking for work, I do need an identity closely tied to my real life identity. So this identity was created to facilitate that, so that I can still provide personal details publicly without cross contaminating with other identities.&lt;/p>
&lt;p>Thus this identity, and by extension this website does not have much content. All my achievements are strewn across various identities.&lt;/p>
&lt;p>While this Identity isn&amp;rsquo;t &lt;em>that&lt;/em> new, it&amp;rsquo;s not been utilized much. I&amp;rsquo;m going to start using it more for projects that don&amp;rsquo;t require separation of identities.&lt;/p>
&lt;p>So hopefully this website will be more appealing to employers in the near future.&lt;/p></description></item><item><title>Hello Hugo</title><link>/post/hello-world/</link><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><guid>/post/hello-world/</guid><description>&lt;p>Hello, this is a very simple post to say that this website is now working. Built with hugo and the Academic hugo theme.&lt;/p>
&lt;p>It&amp;rsquo;s very simple, hosted on github pages with it automatically deployed through github actions.&lt;/p></description></item></channel></rss>